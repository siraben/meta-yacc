.syntax [ program exp1 exp3 arg output exp2 exp1
          comment stat support declist main ] program

arg = '*1' { 'emit_label_a();' } { 'll &= 2;' }
    | '*2' { 'emit_label_b();' } { 'll &= 1;' }
    | '*'  { 'emit_token();' }
    | .string { 'emit(' * ');' };

output = ('{' $ arg '}' { 'emit_newline();' } | '<' $ arg '>' ) ;

exp3 = .id { 'meta_' * '();' }
     | .string { 'read_literal(' * ');' }
     | '.id' { 'read_id();' }
     | '.number' { 'read_number();' }
     | '.string' { 'read_string();' }
     | '.lm+' { 'indent += 2;' }
     | '.lm-' { 'indent -= 2;' }
     | '(' exp1 ')'
     | '.e' { 'flag = 1;' }
     | '$' { 'do {' } .lm+
       exp3 .lm- {'} while (flag);' }
       { 'flag = 1;' };

exp2 =  ( exp3 { 'if (flag) {' }    | output { 'if (1) {' } ) .lm+
       $( exp3 { 'maybe_error();' } | output )
       .lm- { '}' } ;

exp1 = { 'do {' } .lm+ exp2
       $( '|' { 'if (flag) { break; }' } exp2 )
       .lm- { '} while (0);' } ;

comment = '[' .string ']' ;
stat = .id { 'void meta_' * '() {' } .lm+
       '=' exp1 ';'
       .lm- { '}' } { }
     | comment ;

support = {~
// Output name, input string, token
char *on, *s, *t;
// Output
FILE *o;
// Labels
int ac, bc;
// Label locks
int ll = 3;
// Current location in string, flag, indentation level, newline flag
int p, flag, indent, nl;
// Line counter
int line = 1;

void skip_whitespace() {
  while (isspace(s[p])) {
    if (s[p] == '\n') {
      line++;
    }
    p++;
  }
}

void make_token(int sp) {
  int length = p - sp;
  free(t);
  t = malloc(length + 1);
  t[length] = 0;
  memcpy(t, &s[sp], length);
}

void emit_token() {
  int i;
  char d;
  // We introduce a new quoting operator, the tilde, which can quote
  // single quotes.  In this way, we don't need an escape character.
  if (t[0] == '\'' || t[0] == '~'~'~') {
    d = t[0];
    fprintf(o, "\"");
    for (i = 1; t[i] && t[i] != d; i++) {
      switch (t[i]) {
        case '\n':
          fprintf(o, "\\n");
          break;
        case '\"':
          fprintf(o, "\\\"");
          break;
        case '\'':
          fprintf(o, "\\\'");
          break;
        case '\\':
          fprintf(o, "\\\\");
          break;
        default:
          fprintf(o, "%c", t[i]);
          break;
      }
    }
    fprintf(o, "\"");
    return;
  }
  fprintf(o, "%s", t);
}

void emit(const char *s) {
  // fprintf(o, "%s", s);
  fprintf(o, "%*s%s", nl ? indent : 0, "", s);
  nl = 0;
}

void emit_label_a() {
  ac += (ll & 1);
  fprintf(o, "a%02d ", ac);
}

void emit_label_b() {
  bc += (ll & 2) >> 1;
  fprintf(o, "b%02d ", bc);
}

void unlock_labels() {
  ll = 3;
}

void emit_newline() {
  nl = 1;
  fprintf(o, "\n");
}

void read_literal(const char *l) {
  int e, i;
  skip_whitespace();
  e = p;
  i = 0;
  while (s[p] && l[i] && s[p] == l[i]) {
    p++;
    i++;
  }
  if (!l[i]) {
    flag = 1;
    make_token(e);
  } else {
    p = e;
    flag = 0;
  }
}

void read_id() {
  int e;
  skip_whitespace();
  e = p;
  if (isalpha(s[p])) {
    p++;
    flag = 1;
  } else {
    flag = 0;
    return;
  }
  while (isalnum(s[p])) {
    p++;
  }
  make_token(e);
}

void read_number() {
  int e;
  skip_whitespace();
  e = p;
  if (s[p] == '-') {
    p++;
  }
  if (isdigit(s[p])) {
    p++;
    flag = 1;
  } else {
    flag = 0;
    return;
  }
  while (isdigit(s[p])) {
    p++;
  }
  make_token(e);
}

void read_string() {
  int e;
  char delim;
  skip_whitespace();
  e = p;
  if (s[p] == '\'' || s[p] == '~'~'~') {
    delim = s[p++];
    while (s[p] && s[p] != delim) {
      if (s[p] == '\n') {
        line++;
      }
      p++;
    }
    if (s[p] == delim) {
      p++;
      flag = 1;
      make_token(e);
    } else if (!s[p]) {
      p = e;
      flag = 0;
    }
  } else {
    flag = 0;
    return;
  }
}

void maybe_error() {
  if (!flag) {
    fprintf(stderr, "Error in line %i at token '%s'\n", line, t);
    fclose(o);
    remove(on);
    free(s);
    free(t);
    exit(1);
  }
}
~} ;

declist = {
~#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
~
} '[' $ (.id {'void meta_' * '();' } ) ']' ;

main = .id {
~int main(int argc, char *argv[]) {
    FILE *input;
    int length;

    if (argc < 3) {
        fprintf(stderr, "usage: meta <input> <output>\n");
        exit(1);
    }
    input = fopen(argv[1], "r");
    if (!input) {
        fprintf(stderr, "invalid input file\n");
        exit(1);
    }
    on = argv[2];
    o = fopen(on, "w");
    if (!o) {
        fprintf(stderr, "invalid output file\n");
        exit(1);
    }
    fseek(input, 0, SEEK_END);
    length = (int)ftell(input);
    fseek(input, 0, SEEK_SET);
    s = malloc(length + 1);
    fread(s, 1, length, input);
    s[length] = 0;
    fclose(input);

    t = malloc(1);
    t[0] = 0;

    meta_~ * ~();

    skip_whitespace();
    if (p == strlen(s)) {
      fprintf(stdout, "Fully parsed %d characters.\n", p);
    } else {
      fprintf(stderr, "%d/%d characters processed\n", p, strlen(s));
    }

    fclose(o);
    free(s);
    free(t);
    return 0;
}~} ;

program = '.syntax' declist support main $ stat '.end';

.end
