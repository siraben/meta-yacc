.syntax [ program exp1 exp3 arg output exp2 exp1
          comment stat support declist main ] program

arg = '*'  { 'emit-token' }
    | .string { 's\" ' * ' mtype' };

output = ('{' $ arg '}' { 'emit-newline' } | '<' $ arg '>' ) ;

exp3 = .id { 'meta-' * ~' do-parse~ }
     | .string { 's\" ' * ' read-literal' }
     | '.id' { 'read-id' }
     | '.number' { 'read-number' }
     | '.string' { 'read-string' }
     | '.lm+' { '2 indent +!' }
     | '.lm-' { '-2 indent +!' }
     | '(' exp1 ')'
     | '.e' { 'set-flag!' }
     | '$' { '0 0 do' } .lm+
       exp3 .lm- {'flagged? invert if leave then loop' }
       { 'set-flag!' };

exp2 =  ( exp3 { 'flagged? if' }    | output { 'true if' } ) .lm+
       $( exp3 { 'maybe-error' } | output )
       .lm- { 'then' } ;

exp1 = { '1 0 do' } .lm+ exp2
       $( '|' { 'flagged? if leave then' } exp2 )
       .lm- { 'loop' } ;

comment = '[' .string ']' ;
stat = .id
       { 'meta-' * ~'~ }
       { ': meta-' * }
       .lm+ '=' exp1 ';'
       .lm- { '; latestxt swap ! ' }
     | comment ;

support = {~
\ input string | string length  | token buffer | token length
variable s       variable slen    0 value t      variable tlen

\ Current location in string
variable p                  0 p !

\ Flags
false value flagged?        false value newlined?

\ Indentation level
variable indent

\ Line counter
variable lines              1 lines !

10  constant \n    9   constant \t    126 constant tilde
39  constant tick  34  constant dtick

: set-flag!   ( -- ) true  to flagged? ;
: unflag!     ( -- ) false to flagged? ;

\ Run a parser, which is a pointer to a word.
: do-parse    ( -- ) @ execute ;

: set-source! ( c-addr u -- ) slen ! s ! ;
: c-array-ref ( a b -- a[b] ) + c@ ;
: isspace ( c -- # ) bl over = over \t = or swap \n = or ;

: isdelim   ( c -- # ) dup tick = swap tilde = or ;
: curr-char (   -- c ) s @ p @ c-array-ref ;

: advance   ( -- ) 1 p     +! ;
: inc-lines ( -- ) 1 lines +! ;

: skip-whitespace ( -- )
  begin curr-char isspace while
    curr-char \n = negate lines +! advance
  repeat
;

: ?free ( p|0 -- )
  ?dup-if free if s" failed to free token buffer" exception throw then then
;
: ?free-token ( -- ) t ?free ;

: realloc-token ( -- )
  tlen @ 1+ allocate if ." failed to allocate memory for token" then
  to t
;

: nul-terminate-token    ( -- )    0 t tlen @ + c!       ;
: copy-token-from-string ( sp -- ) s @ + t tlen @ cmove  ;

: write-token       ( sp -- ) nul-terminate-token copy-token-from-string ;
: calc-token-length ( sp -- sp ) p @ over - tlen ! ;

\ Make a token up to char sp.
: make-token ( sp -- ) ?free-token calc-token-length realloc-token write-token ;

\ Emit a character in a string, possibly quoted.
: emit-string-char ( c -- )
  case
    \n       of .\" \\n"  endof
    dtick    of .\" \\\"" endof
    tick     of .\" \\\'" endof
    [char] \ of .\" \\\\" endof
    \ Otherwise, print the character.
    dup emit
  endcase
;

\ Current character from the token buffer.
: tok-char ( -- c ) t c@ ;

: emit-string ( -- )
  tok-char
    tlen @ 1 do
      t i c-array-ref 2dup
      = if 2drop leave then
      emit-string-char
    loop
  dtick emit
;

: emit-token ( -- ) tok-char isdelim if emit-string else t tlen @ type then ;


: print-indent ( -- ) indent @ spaces ;
: mtype ( c-addr u -- ) newlined? if print-indent then type 0 to newlined? ;
: emit-newline 1 to newlined? cr ;

: read-literal ( c-addr u -- )
  { length }
  p @ 0 { l e i  }
  skip-whitespace

  length 0 do
        curr-char 0<>
        l i c-array-ref 0<>
      and
      curr-char  l i c-array-ref   =
    and
    if
      advance
      i 1+ to i
    else
      leave
    then
  loop

  i length = if
    set-flag!
    e make-token
  else
    e p ! unflag!
  then
;

: isupper ( c -- # ) [char] A [char] Z 1+ within ;
: islower ( c -- # ) [char] a [char] z 1+ within ;
: isalpha ( c -- # ) dup isupper swap islower or ;

: isdigit ( c -- # ) [char] 0 [char] 9 1+ within ;
: isalnum ( c -- # ) dup isalpha swap isdigit or ;

: advance-while-alnum ( -- ) begin curr-char isalnum while advance repeat ;
: advance-while-digit ( -- ) begin curr-char isdigit while advance repeat ;

: read-id ( -- )
  skip-whitespace
  p @
  curr-char isalpha if
    advance set-flag!
  else
    unflag! drop exit
  then

  advance-while-alnum make-token
;


: read-number ( -- )
  skip-whitespace
  p @
  
  \ Possibly with a leading dash.
  curr-char [char] - = if advance then

  curr-char isdigit if
    advance set-flag!
    advance-while-digit make-token
  else
    drop unflag! exit
  then
;

\ Advance the pointer until the next occurence of c.
: advance-while-<> ( c -- )
  begin dup curr-char <> while
    curr-char \n = if inc-lines then
    advance
  repeat
;

: read-string ( -- )
  skip-whitespace
  p @
  
  curr-char isdelim if
    curr-char advance advance-while-<>
    
    curr-char = if
      advance set-flag! make-token
    else
      \ If we hit the end of the file, backtrack.
      curr-char 0= if p ! then
    then
  else
    drop unflag!
  then
;

: maybe-error
  flagged? invert if ( -- )
    ." Error in line " lines ? ." at token '" t tlen @ type ." ' "
    ." at character " p @ . cr
    s" Parse error" exception throw
  then
;

\ File ID in       | File ID out
0 value fd-in        0 value fd-out

: open-input  ( addr u -- ) r/o open-file   throw to fd-in  ;
: open-output ( addr u -- ) w/o create-file throw to fd-out ;

\ Size of each read.
1000 1000 * constant blk-size

\ Current size of the file buffer | Pointer to the file buffer.
0 value curr-buf-size               0 value file-buffer

blk-size allocate throw to file-buffer

\ Read a file, zero-delimited.
: do-read-file ( -- )
  file-buffer blk-size fd-in read-file
  if s" failed to read file" exception throw then
  dup to curr-buf-size
  file-buffer + 0 swap !
;

: close-input  ( -- ) fd-in  close-file throw ;
: close-output ( -- ) fd-out close-file throw ;

: set-file-as-input file-buffer curr-buf-size set-source! ;
: print-file        file-buffer curr-buf-size type ;
~} ;

declist = '[' $ (.id {'variable meta-' * ~'~} ) ']' ;

main = .id {
~
: check-args
  argc @ 3 <> if s" usage: meta <input> <output>" exception throw then ;

: process-input-arg ( -- )
  next-arg 2dup ." Input file: " type cr open-input
  do-read-file set-file-as-input close-input
;

: process-output-arg ( -- )
  next-arg 2dup ." Output file: " type cr open-output ;

: process-args ( -- ) process-input-arg process-output-arg ;
: start-msg    ( -- ) cr ." meta-yacc has started." cr ;
: assert-clean-stack  ( -- )
  depth if
    s" stack not empty on exit" exception throw
  else
    cr ." Parsed without errors." cr
  then
;

: run-meta-program find-name name>int fd-out outfile-execute ;
: main
  start-msg check-args process-args
  s" meta-~ * ~" run-meta-program
  close-output assert-clean-stack bye
;~} ;

program = '.syntax' declist support main $ stat '.end' { 'main' };

.end
